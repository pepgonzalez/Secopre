<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
	<bean id="queryContainer" class="ideasw.secopre.sql.QueryContainer">
		<property name="queries">
			<props>
			
				<prop key="GET_ENTRY_DETAIL_MOD">
					<![CDATA[
						SELECT S.ID AS STATE_ID,
							   S.NAME AS STATE_NAME,
							   DISTRICT_ID AS DISTRICT_ID ,
							   D.NUMBER AS DISTRICT_NUMBER,
							   ENTRY_ID AS ENTRY_ID,
							   E.DESCRIPTION AS ENTRY_DESCRIPTION,
							   E.CODE AS ENTRY_CODE,
							   ANNUAL_AMOUNT AS ANNUAL_AMOUNT ,
							   SUM(ENERO) AS ENERO,
							   SUM(FEBRERO) AS FEBRERO,
							   SUM(MARZO) AS MARZO,
							   SUM(ABRIL) AS ABRIL,
							   SUM(MAYO) AS MAYO,
							   SUM(JUNIO) AS JUNIO,
							   SUM(JULIO) AS JULIO,
							   SUM(AGOSTO) AS AGOSTO,
							   SUM(SEPTIEMBRE) AS SEPTIEMBRE,
							   SUM(OCTUBRE) AS OCTUBRE,
							   SUM(NOVIEMBRE) AS NOVIEMBRE,
							   SUM(DICIEMBRE) AS DICIEMBRE
						  FROM (
						SELECT ED.DISTRICT_ID,
							   ED.ENTRY_ID,
							   ED.ANNUAL_AMOUNT AS ANNUAL_AMOUNT,
							   ED.MONTH,
							   CASE WHEN MONTH = 0 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS ENERO,
							   CASE WHEN MONTH = 1 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS FEBRERO,
							   CASE WHEN MONTH = 2 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS MARZO,
							   CASE WHEN MONTH = 3 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS ABRIL,
							   CASE WHEN MONTH = 4 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS MAYO,
							   CASE WHEN MONTH = 5 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS JUNIO,
							   CASE WHEN MONTH = 6 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS JULIO,
							   CASE WHEN MONTH = 7 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS AGOSTO,
							   CASE WHEN MONTH = 8 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS SEPTIEMBRE,
							   CASE WHEN MONTH = 9 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS OCTUBRE,
							   CASE WHEN MONTH = 10 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS NOVIEMBRE,
							   CASE WHEN MONTH = 11 THEN ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT ELSE 0 END AS DICIEMBRE
						  FROM secopre.ENTRYDISTRICT ED 
						) T,
						  secopre.ENTRY E,
						  secopre.DISTRICT D,
						  secopre.PROGRAMMATIC_KEY PK,
						  secopre.STATE S
						WHERE T.DISTRICT_ID = D.ID
						AND T.ENTRY_ID = E.ID
						AND E.PROGRAMMATIC_ID = PK.ID
						AND S.ID = D.STATE_ID	
					]]>
				</prop>	

				<prop key="GET_ENTRY_DETAIL">
					<![CDATA[
						SELECT S.ID AS STATE_ID,
							   S.NAME AS STATE_NAME,
							   DISTRICT_ID AS DISTRICT_ID ,
							   D.NUMBER AS DISTRICT_NUMBER,
							   ENTRY_ID AS ENTRY_ID,
							   E.DESCRIPTION AS ENTRY_DESCRIPTION,
							   E.CODE AS ENTRY_CODE,
							   ANNUAL_AMOUNT AS ANNUAL_AMOUNT ,
							   SUM(ENERO) AS ENERO,
							   SUM(FEBRERO) AS FEBRERO,
							   SUM(MARZO) AS MARZO,
							   SUM(ABRIL) AS ABRIL,
							   SUM(MAYO) AS MAYO,
							   SUM(JUNIO) AS JUNIO,
							   SUM(JULIO) AS JULIO,
							   SUM(AGOSTO) AS AGOSTO,
							   SUM(SEPTIEMBRE) AS SEPTIEMBRE,
							   SUM(OCTUBRE) AS OCTUBRE,
							   SUM(NOVIEMBRE) AS NOVIEMBRE,
							   SUM(DICIEMBRE) AS DICIEMBRE
						  FROM (
						SELECT ED.DISTRICT_ID,
							   ED.ENTRY_ID,
							   ED.ANNUAL_AMOUNT AS ANNUAL_AMOUNT,
							   ED.MONTH,
							   CASE WHEN MONTH = 0 THEN ED.BUDGET_AMOUNT ELSE 0 END AS ENERO,
							   CASE WHEN MONTH = 1 THEN ED.BUDGET_AMOUNT ELSE 0 END AS FEBRERO,
							   CASE WHEN MONTH = 2 THEN ED.BUDGET_AMOUNT ELSE 0 END AS MARZO,
							   CASE WHEN MONTH = 3 THEN ED.BUDGET_AMOUNT ELSE 0 END AS ABRIL,
							   CASE WHEN MONTH = 4 THEN ED.BUDGET_AMOUNT ELSE 0 END AS MAYO,
							   CASE WHEN MONTH = 5 THEN ED.BUDGET_AMOUNT ELSE 0 END AS JUNIO,
							   CASE WHEN MONTH = 6 THEN ED.BUDGET_AMOUNT ELSE 0 END AS JULIO,
							   CASE WHEN MONTH = 7 THEN ED.BUDGET_AMOUNT ELSE 0 END AS AGOSTO,
							   CASE WHEN MONTH = 8 THEN ED.BUDGET_AMOUNT ELSE 0 END AS SEPTIEMBRE,
							   CASE WHEN MONTH = 9 THEN ED.BUDGET_AMOUNT ELSE 0 END AS OCTUBRE,
							   CASE WHEN MONTH = 10 THEN ED.BUDGET_AMOUNT ELSE 0 END AS NOVIEMBRE,
							   CASE WHEN MONTH = 11 THEN ED.BUDGET_AMOUNT ELSE 0 END AS DICIEMBRE
						  FROM secopre.ENTRYDISTRICT ED 
						) T,
						  secopre.ENTRY E,
						  secopre.DISTRICT D,
						  secopre.PROGRAMMATIC_KEY PK,
						  secopre.STATE S
						WHERE T.DISTRICT_ID = D.ID
						AND T.ENTRY_ID = E.ID
						AND E.PROGRAMMATIC_ID = PK.ID
						AND S.ID = D.STATE_ID	
					]]>
				</prop>	
				<prop key="UPDATE_UPLOADED_FILE_IN_REQUEST">
					<![CDATA[
						UPDATE secopre.REQUEST
						SET RESOURCE_PATH = :uploadedFilePath
						WHERE ID = :requestId
					]]>
				</prop>	
						
				<prop key="CLEAN_REQUEST_DETAIL">
					<![CDATA[
						DELETE FROM secopre.REQUEST_DETAIL WHERE REQUEST_ID = :requestId
					]]>
				</prop>	
						
				<prop key="GET_FORMALITY_FROM_USER_ID">
					<![CDATA[
						SELECT DISTINCT (T.ID) AS FORMALITY_ID, T.F_DESC AS DESCRIPTION, T.WORKFLOW_ID, T.AUTHORIZATION_ID, T.CODE, T.CREATE_VALIDATION, T.PROCESS_AFTER_CREATION FROM (
							SELECT F.ID,
								   F.DESCRIPTION F_DESC,
								   F.WORKFLOW_ID,
								   F.AUTHORIZATION_ID,
								   F.CODE,
								   F.CREATE_VALIDATION,
								   F.PROCESS_AFTER_CREATION
							  FROM secopre.FORMALITY F,
							  	   secopre.FORMALITY_ROLE FR,
							  	   secopre.ROLE R,
							  	   secopre.USER_ROLE UR
							 WHERE F.ID = FR.FORMALITY_ID
							   AND FR.ROLE_ID = R.ID
							   AND R.ID = UR.ROLE_ID
							   AND UR.USER_ID = :userId
							) T
					]]>
				</prop>	
				
				<prop key="GET_REQUEST_NEXT_CONSECUTIVE">
					<![CDATA[
						SELECT IFNULL( (MAX(id) + 1), 1) as CONSECUTIVE FROM secopre.REQUEST;
					]]>
				</prop>
				
				<prop key="GET_REQUEST_BY_DISTRICT_NEXT_CONSECUTIVE">
					<![CDATA[
						SELECT IFNULL( (COUNT(id) + 1), 1) as CONSECUTIVE FROM secopre.REQUEST WHERE DISTRICT_ID = :districtId;
					]]>
				</prop>
				
				<prop key="GET_FORMALITY_BY_ID">
					<![CDATA[
						SELECT ID AS FORMALITY_ID,
							   DESCRIPTION,
							   WORKFLOW_ID,
							   LAST_UPDATE,
							   ACTIVE, 
							   AUTHORIZATION_ID,
							   CODE,
							   CREATE_VALIDATION,
							   PROCESS_AFTER_CREATION
					      FROM secopre.FORMALITY WHERE ID = :formalityId
					]]>
				</prop>		
				
				<prop key="INSERT_REQUEST_CONFIG">
					<![CDATA[
						INSERT INTO secopre.REQUEST_CONFIG
						(REQUEST_ID, FORMALITY_ID, WORKFLOW_ID, LAST_UPDATE, ACTIVE, AUTHORIZATION_ID)
						VALUES
						(:requestId, :formalityId, :workFlowId, SYSDATE(), 1, :authorizationId)
					]]>
				</prop>	
			
				<prop key="GET_NEXT_CONSECUTIVE">
					<![CDATA[
						SELECT (IFNULL(MAX(CONSECUTIVE), 0) + 1) AS CONSECUTIVE
  						  FROM secopre.REQUEST_HISTORY
 						 WHERE REQUEST_ID = :requestId
					]]>
				</prop>	
	
				<prop key="GET_REQUEST_FIRST_WORKFLOW_CONFIG">
					<![CDATA[
						 SELECT WC.*
						   FROM secopre.WORKFLOW_CONFIG WC,
						   		secopre.REQUEST_CONFIG RC,
						   		secopre.WORKFLOW W
						  WHERE RC.REQUEST_ID = :requestId
						    AND WC.WF_CFG_CODE = :wfConfigCode
						    AND WC.WORKFLOW_ID = RC.WORKFLOW_ID
						    AND RC.WORKFLOW_ID = W.ID
						    AND WC.STAGE_CONFIG_ID = W.FIRST_STAGE_CFG
					]]>
				</prop>
				
				<prop key="INSERT_REQUEST_HISTORY">
					<![CDATA[
						 INSERT INTO secopre.REQUEST_HISTORY
						 (REQUEST_ID, CONSECUTIVE, WORKFLOW_CONFIG_ID, USER_ID, LAST_UPDATE, ACTIVE, COMMENTS)
						 VALUES
						 (:requestId, :consecutive, :workFlowConfigId, :userId, SYSDATE(), 1, :comments)
					]]>
				</prop>
				
				<prop key="GET_FORMALITY_INBOX">
					<![CDATA[
						 SELECT DISTINCT R.ID, R.FOLIO FOLIO, 
								(CASE WHEN R.EXPENSE_DESCRIPTION IS NOT NULL THEN CONCAT(R.JUSTIFICATION, ' - ', R.EXPENSE_DESCRIPTION) ELSE R.JUSTIFICATION END) AS JUSTIFICATION,
								R.RESOURCE_PATH, DIST.ID DISTRICT,
								CONCAT(STATE.NAME," (DTO-",DIST.NUMBER,")") DISTRICT_DESCRIPTION, RC.FORMALITY_ID,
								F.DESCRIPTION FORMALITY_DESCRIPTION, 
								(SELECT DESCRIPTION FROM secopre.MOVEMENT_TYPE 
								  WHERE ID = (
								  	CASE WHEN R.MOVEMENT_TYPE_ID IS NOT NULL AND R.MOVEMENT_TYPE_ID > 0 THEN R.MOVEMENT_TYPE_ID
								  	ELSE F.DEFAULT_MOV_TYPE
								  	END
								  )) AS TRANSACTION_TYPE,
								RH.WORKFLOW_CONFIG_ID,
								WC.STAGE_CONFIG_ID,
								(CASE WHEN R.MOVEMENT_TYPE_ID = 3 THEN
								(SELECT SUM(I.TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL I WHERE I.REQUEST_ID = R.ID AND I.MOVEMENT_TYPE_ID > 0)
								ELSE
								(SELECT SUM(TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL WHERE REQUEST_ID = R.ID) END) AS TOTAL_AMOUNT,
								--(SELECT SUM(TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL WHERE REQUEST_ID = R.ID) AS TOTAL_AMOUNT,
								(SELECT LAST_UPDATE FROM secopre.REQUEST_HISTORY WHERE CONSECUTIVE = 1 AND REQUEST_ID = R.ID) AS CREATION_DATE,
								ST.DESCRIPTION, WC.NEXT_STAGE_CONFIG, SC.PATH_ID, P.URL,
								SC.IS_CAPTURE, SC.IS_AUTHORIZATION,
								(CASE WHEN((SC.IS_CANCELED) OR (SC.IS_OPERATED))
									THEN 1 
									ELSE 0 
								END) AS IS_END_WORKFLOW,
								SC.IS_CANCELED,
								SC.IS_OPERATED,
								ifnull(SC.CAPTURE_FORM,"") CAPTURE_FORM,
								WC.STATUS_ID, S.DESCRIPTION NEXT_DESCRIPTION,
								R.LAST_UPDATE FOLIO_CREATION_DATE,
								(SELECT COUNT(*) FROM secopre.REQUEST_HISTORY IRH WHERE IRH.REQUEST_ID = R.ID AND IRH.COMMENTS IS NOT NULL) AS HAS_COMMENTS
						   FROM secopre.REQUEST R,
						   		secopre.REQUEST_HISTORY RH,
						   		secopre.REQUEST_CONFIG RC,
						   		secopre.FORMALITY F,
						   		secopre.WORKFLOW_CONFIG WC,
						   		secopre.STAGE_CONFIG SC0,
						   		secopre.STAGE_CONFIG SC,
						   		secopre.PATH P,
						   		secopre.STATUS S,
						   		secopre.STAGE_CONFIG_ROLE SCR,
						   		secopre.USER_ROLE UR,
						   		secopre.USER U,
						   		secopre.STAGE ST,
						   		secopre.DISTRICT DIST,
						   		secopre.DISTRICT_USER DU,
						   		secopre.STATE STATE
						  WHERE R.ID = RH.REQUEST_ID 							-- TODOS LOS FOLIOS Y SU HISTORIA
						    AND R.ACTIVE = 1									-- ACTIVOS
						    AND RH.ACTIVE = 1		 							-- FILTRO POR TRANSICION ACTIVA
						    AND R.ID = RC.REQUEST_ID  							-- JOIN CON LA CONFIGURACION
						    AND RC.FORMALITY_ID = F.ID							-- JOIN DE LA CONFIGURACION CON EL TRAMITE
						    AND RH.WORKFLOW_CONFIG_ID = WC.ID					-- JOIN A LA TRANSICION
						    AND WC.ACTIVE = 1									-- FILTRO TRANSICION ACTIVA
						    AND WC.NEXT_STAGE_CONFIG = SC.ID					-- JOIN CON CONFIGURACION DE SIGUIENTE ETAPA
						    AND WC.STAGE_CONFIG_ID = SC0.ID						-- JOIN CON CONFIGURACION DE ETAPA ACTUAL
						    AND SC0.STAGE_ID = ST.ID							-- JOIN CON ETAPA ACTUAL
						    AND SC.PATH_ID = P.ID								-- JOIN CON PATH DE CONFIGURACION DE SIGUIENTE ETAPA
						    AND WC.STATUS_ID = S.ID								-- JOIN CON ESTATUS DE TRANSICION
						    AND SC.ID = SCR.STAGE_CONFIG_ID						-- JOIN CON ROLE OWNER DE SIGUIENTE ETAPA
						    AND SCR.ROLE_ID = UR.ROLE_ID						-- JOIN CON ROLE
						    AND UR.USER_ID = U.ID								-- JOIN CON USER
						    AND R.DISTRICT_ID = DIST.ID							-- JOIN REQUEST CON DISTRITO
						    AND U.ID = :userId									-- ID USER
						    AND U.ID = DU.USER_ID								-- JOIN USER CON DISTRICTUSER
						    AND DIST.ID = DU.DISTRICT_ID						-- JOIN DISTRICT USER CON DISTRITO
						    AND DIST.STATE_ID = STATE.ID						-- JOIN DISTRICT CON STATE
						    AND YEAR(R.LAST_UPDATE) = YEAR(NOW())				-- SOLO ANIO ACTUAL
						    ORDER BY FOLIO_CREATION_DATE DESC
					]]>
				</prop>
				
				<prop key="GET_ALL_FORMALITY">
					<![CDATA[
					SELECT DISTINCT R.ID, R.FOLIO FOLIO, R.JUSTIFICATION, R.RESOURCE_PATH, DIST.ID DISTRICT,
								CONCAT(STATE.NAME," (DTO-",DIST.NUMBER,")") DISTRICT_DESCRIPTION, RC.FORMALITY_ID,
								F.DESCRIPTION FORMALITY_DESCRIPTION,
								(SELECT DESCRIPTION FROM secopre.MOVEMENT_TYPE
								  WHERE ID = (
								  	CASE WHEN R.MOVEMENT_TYPE_ID IS NOT NULL AND R.MOVEMENT_TYPE_ID > 0 THEN R.MOVEMENT_TYPE_ID
								  	ELSE F.DEFAULT_MOV_TYPE
								  	END
								  )) AS TRANSACTION_TYPE,
								RH.WORKFLOW_CONFIG_ID,
								WC.STAGE_CONFIG_ID,
								(SELECT SUM(TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL WHERE REQUEST_ID = R.ID) AS TOTAL_AMOUNT,
								(SELECT LAST_UPDATE FROM secopre.REQUEST_HISTORY WHERE CONSECUTIVE = 1 AND REQUEST_ID = R.ID) AS CREATION_DATE,
								ST.DESCRIPTION, WC.NEXT_STAGE_CONFIG, SC.PATH_ID, P.URL,
								SC.IS_CAPTURE, SC.IS_AUTHORIZATION,
								(CASE WHEN((SC.IS_CANCELED) OR (SC.IS_OPERATED))
									THEN 1
									ELSE 0
								END) AS IS_END_WORKFLOW,
								SC.IS_CANCELED,
								SC.IS_OPERATED,
								ifnull(SC.CAPTURE_FORM,"") CAPTURE_FORM,
								WC.STATUS_ID, S.DESCRIPTION NEXT_DESCRIPTION,
                                R.LAST_UPDATE FOLIO_CREATION_DATE,
                                0 as HAS_COMMENTS
						   FROM secopre.REQUEST R,
						   		secopre.REQUEST_HISTORY RH,
						   		secopre.REQUEST_CONFIG RC,
						   		secopre.FORMALITY F,
						   		secopre.WORKFLOW_CONFIG WC,
						   		secopre.STAGE_CONFIG SC0,
						   		secopre.STAGE_CONFIG SC,
						   		secopre.PATH P,
						   		secopre.STATUS S,
						   		secopre.STAGE_CONFIG_ROLE SCR,
						   		secopre.USER_ROLE UR,
						   		secopre.USER U,
						   		secopre.STAGE ST,
						   		secopre.DISTRICT DIST,
						   		secopre.DISTRICT_USER DU,
						   		secopre.STATE STATE
						  WHERE R.ID = RH.REQUEST_ID 							-- TODOS LOS FOLIOS Y SU HISTORIA
						    AND R.ACTIVE = 1									-- ACTIVOS
						    AND RH.ACTIVE = 1		 							-- FILTRO POR TRANSICION ACTIVA
						    AND R.ID = RC.REQUEST_ID  							-- JOIN CON LA CONFIGURACION
						    AND RC.FORMALITY_ID = F.ID							-- JOIN DE LA CONFIGURACION CON EL TRAMITE
						    AND RH.WORKFLOW_CONFIG_ID = WC.ID					-- JOIN A LA TRANSICION
						    AND WC.ACTIVE = 1									-- FILTRO TRANSICION ACTIVA
						    AND WC.NEXT_STAGE_CONFIG = SC.ID					-- JOIN CON CONFIGURACION DE SIGUIENTE ETAPA
						    AND WC.STAGE_CONFIG_ID = SC0.ID						-- JOIN CON CONFIGURACION DE ETAPA ACTUAL
						    AND SC0.STAGE_ID = ST.ID							-- JOIN CON ETAPA ACTUAL
						    AND SC.PATH_ID = P.ID								-- JOIN CON PATH DE CONFIGURACION DE SIGUIENTE ETAPA
						    AND WC.STATUS_ID = S.ID								-- JOIN CON ESTATUS DE TRANSICION
						    AND SC.ID = SCR.STAGE_CONFIG_ID						-- JOIN CON ROLE OWNER DE SIGUIENTE ETAPA
						    AND SCR.ROLE_ID = UR.ROLE_ID						-- JOIN CON ROLE
						    AND UR.USER_ID = U.ID								-- JOIN CON USER
						    AND R.DISTRICT_ID = DIST.ID							-- JOIN REQUEST CON DISTRITO
						    AND U.ID = DU.USER_ID								-- JOIN USER CON DISTRICTUSER
						    AND DIST.ID = DU.DISTRICT_ID						-- JOIN DISTRICT USER CON DISTRITO
						    AND DIST.STATE_ID = STATE.ID						-- JOIN DISTRICT CON STATE
						    ORDER BY FOLIO_CREATION_DATE DESC
                            LIMIT 10
					]]>
				</prop>
				
				<prop key="GET_REQUEST_WORKFLOW_CONFIG">
					<![CDATA[
						 SELECT WC.*
						   FROM secopre.WORKFLOW_CONFIG WC,
						   		secopre.REQUEST_CONFIG RC
						  WHERE RC.REQUEST_ID = :requestId
						    AND WC.WF_CFG_CODE = :wfConfigCode
						    AND WC.WORKFLOW_ID = RC.WORKFLOW_ID
						    AND WC.STAGE_CONFIG_ID = :stageConfigId
					]]>
				</prop>
				
				<prop key="INACTIVATE_ACTIVE_STAGE">
					<![CDATA[
						 UPDATE secopre.REQUEST_HISTORY
						    SET ACTIVE = 0
						  WHERE REQUEST_ID = :requestId
					]]>
				</prop>
				
				
				<prop key="GET_RECTIFICATION_INBOX">
					<![CDATA[
						SELECT R.ID,
							   R.FOLIO,
							   R.JUSTIFICATION,
							   R.CERTIFIED_ACCOUNT,
							   F.DESCRIPTION,
							   RC.LAST_UPDATE,
							   (SELECT SUM(TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL RD WHERE RD.REQUEST_ID = R.ID) AS TOTAL,
							   U.USERNAME,
							   (CASE WHEN R.RECTIFICATION_ID IS NOT NULL THEN 1 ELSE 0 END) AS HAS_RECTIFICATION,
							   (SELECT RR.FOLIO FROM secopre.REQUEST RR WHERE RR.ID = R.RECTIFICATION_ID) RECTIFICATED_FOLIO
						  FROM secopre.REQUEST_CONFIG RC,
						  	   secopre.REQUEST_HISTORY RH,
						  	   secopre.WORKFLOW_CONFIG WC,
						  	   secopre.STAGE_CONFIG SC,
						  	   secopre.REQUEST R,
						  	   secopre.FORMALITY F,
						  	   secopre.USER U
						 WHERE RC.FORMALITY_ID = 2
						   AND RC.LAST_UPDATE >= DATE_FORMAT(SYSDATE(), '%Y-%m-01')
						   AND RC.REQUEST_ID = RH.REQUEST_ID
						   AND RH.ACTIVE = 1
						   AND RH.WORKFLOW_CONFIG_ID = WC.ID
						   AND WC.NEXT_STAGE_CONFIG = SC.ID
						   AND SC.IS_OPERATED = 1
						   AND RH.REQUEST_ID = R.ID
						   AND RC.FORMALITY_ID = F.ID
						   AND U.ID = RH.USER_ID
					]]>
				</prop>
				
				
				
				<prop key="GET_REQUEST_BY_ID">
					<![CDATA[
						SELECT R.ID AS REQUEST_ID,
							   R.FOLIO,
							   R.DISTRICT_ID,
							   R.JUSTIFICATION,
							   R.RESOURCE_PATH,
							   R.MOVEMENT_TYPE_ID,
							   R.CERTIFIED_ACCOUNT,
							   R.ENTRY_ID,
							   R.EXPENSE_DESCRIPTION,
							   R.LAST_UPDATE
						  FROM secopre.REQUEST R
						 WHERE R.ID = :requestId
					]]>
				</prop>
				
				<prop key="INSERT_OR_UPDATE_REQUEST">
					<![CDATA[
						INSERT INTO secopre.REQUEST
						(ID, FOLIO, DISTRICT_ID, JUSTIFICATION, RESOURCE_PATH, MOVEMENT_TYPE_ID, LAST_UPDATE, ACTIVE, CERTIFIED_ACCOUNT, ENTRY_ID, RECTIFICATION_ID, EXPENSE_DESCRIPTION)
						VALUES
						(:requestId, :folio, :districtId, :justification, :resourcePath, :movementTypeId,  SYSDATE(), 1, :certifiedAccount, :entryId, :rectificationId, :expenseDescription)
						ON DUPLICATE KEY UPDATE RESOURCE_PATH = VALUES(RESOURCE_PATH),
												MOVEMENT_TYPE_ID = VALUES(MOVEMENT_TYPE_ID),
												CERTIFIED_ACCOUNT = VALUES(CERTIFIED_ACCOUNT),
												ENTRY_ID = VALUES(ENTRY_ID),
												RECTIFICATION_ID = VALUES(RECTIFICATION_ID),
												EXPENSE_DESCRIPTION = VALUES(EXPENSE_DESCRIPTION)
					]]>
				</prop>

				<prop key="UPDATE_REQUEST_DETAIL">
					<![CDATA[
						UPDATE secopre.REQUEST_DETAIL
						SET PROGRAMATIC_KEY_ID = :programaticKeyId,
							ENTRY_ID = :entryId,
							INITIAL_MONTH = :initialMonth,
							FINAL_MONTH = :finalMonth,
							MONTH_AMOUNT = :monthAmount,
							TOTAL_AMOUNT = :totalAmount,
							LAST_UPDATE = SYSDATE()
						where id = :requestDetailId
					]]>
				</prop>

				<prop key="GET_REQUEST_DETAIL">
					<![CDATA[
						SELECT * FROM secopre.REQUEST_DETAIL
						where REQUEST_ID = :requestId
					]]>
				</prop>
				
				<prop key="INSERT_OR_UPDATE_REQUEST_DETAIL">
					<![CDATA[
						INSERT INTO secopre.REQUEST_DETAIL
						(id, REQUEST_ID, MOVEMENT_TYPE_ID, PROGRAMATIC_KEY_ID, ENTRY_ID, INITIAL_MONTH, FINAL_MONTH, MONTH_AMOUNT, TOTAL_AMOUNT, CREATION_DATE, ACTIVE)
						VALUES
						(:requestDetailId, :requestId, :movementTypeId, :programaticKeyId, :entryId, :initialMonth, :finalMonth, :monthAmount, :totalAmount, sysdate(), 1)
						ON DUPLICATE KEY UPDATE 
							PROGRAMATIC_KEY_ID = VALUES(PROGRAMATIC_KEY_ID),
							ENTRY_ID = VALUES(ENTRY_ID),
							INITIAL_MONTH = VALUES(INITIAL_MONTH),
							FINAL_MONTH = VALUES(FINAL_MONTH),
							MONTH_AMOUNT = VALUES(MONTH_AMOUNT),
							TOTAL_AMOUNT = VALUES(TOTAL_AMOUNT),
							LAST_UPDATE = SYSDATE()
					]]>
				</prop>
				
				<prop key="GET_REQUEST_CONFIG_BY_ID">
					<![CDATA[
						SELECT *
						  FROM secopre.REQUEST_CONFIG
						 WHERE REQUEST_ID = :requestId
					]]>
				</prop>
				
				<prop key="CAN_USER_AUTHORIZE">
					<![CDATA[
					SELECT COUNT(*) AS CAN_AUTHORIZE 
					  FROM secopre.AUTHORIZATION_CONFIG AC,
					  	   secopre.USER U,
					  	   secopre.AUTHORIZATION_CONFIG_POSITION ACP
					 WHERE AC.AUTHORIZATION_ID = :authorizationId
					   AND AC.STAGE_CONFIG_ID = :stageConfigId
					   AND AC.ID = ACP.AUTHORIZATION_CONFIG_ID
					   AND ACP.POSITION_ID = U.POSITION_ID
					   AND U.ID = :userId		
					]]>
				</prop>
				
				<prop key="IS_USER_AUTHORIZATION_SUPERUSER">
					<![CDATA[
						SELECT COUNT(*) AS IS_SUPER_USER
						  FROM secopre.AUTHORIZATION A,
						  	   secopre.USER_ROLE UR
						 WHERE A.ID = :authorizationId
						   AND A.SUPER_USER_ROLE = UR.ROLE_ID
						   AND UR.USER_ID = :userId	
					]]>
				</prop>
				
				<prop key="HAS_MORE_SIGNATURES">
					<![CDATA[
						SELECT COUNT(*) HAS_MORE_SIGNATURE 
						  FROM secopre.WORKFLOW_CONFIG WC,
						  	   secopre.REQUEST_CONFIG RC
						 WHERE WC.WORKFLOW_ID = RC.WORKFLOW_ID
						   AND RC.REQUEST_ID = :requestId
						   AND WC.STAGE_CONFIG_ID = :stageConfigId
						   AND WC.WF_CFG_CODE = 'SIGFIRMA'
					]]>
				</prop>
				
				<prop key="GET_REQUEST_HISTORY">
					<![CDATA[
						SELECT H.REQUEST_ID,
							   H.CONSECUTIVE,
							   SC1.ID STAGE_CONFIG_ID,
							   SC1.IS_AUTHORIZATION IS_LAST_AUTHORIZATION,
							   S1.DESCRIPTION ETAPA_INICIAL,
							   SC1.ID NEXT_STAGE_CONFIG,
							   SC1.IS_AUTHORIZATION IS_CURRENT_AUTHORIZATION,
							   S2.DESCRIPTION SIGUIENTE_ETAPA,
							   S.DESCRIPTION ESTATUS,
							   H.LAST_UPDATE FECHA_CREACION,
							   H.COMMENTS,
							   U.USERNAME
						FROM secopre.REQUEST_HISTORY H,
							 secopre.WORKFLOW_CONFIG W,
							 secopre.STAGE_CONFIG SC1,
							 secopre.STAGE_CONFIG SC2,
							 secopre.STAGE S1,
							 secopre.STAGE S2,
							 secopre.STATUS S,
							 secopre.USER U
						where H.REQUEST_ID = :requestId
						AND H.WORKFLOW_CONFIG_ID = W.ID
						AND W.STAGE_CONFIG_ID = SC1.ID
						AND W.NEXT_STAGE_CONFIG = SC2.ID
						AND SC1.STAGE_ID = S1.ID
						AND SC2.STAGE_ID = S2.ID
						AND W.STATUS_ID = S.ID
						AND H.USER_ID = U.ID
					]]>
				</prop>
		
			<prop key="GET_ACTIVE_REQUEST_HISTORY">
					<![CDATA[
						SELECT H.REQUEST_ID,
							   H.CONSECUTIVE,
							   SC1.ID STAGE_CONFIG_ID,
							   SC1.IS_AUTHORIZATION IS_LAST_AUTHORIZATION,
							   S1.DESCRIPTION ETAPA_INICIAL,
							   SC1.ID NEXT_STAGE_CONFIG,
							   SC1.IS_AUTHORIZATION IS_CURRENT_AUTHORIZATION,
							   S2.DESCRIPTION SIGUIENTE_ETAPA,
							   S.DESCRIPTION ESTATUS,
							   H.LAST_UPDATE FECHA_CREACION,
							   H.COMMENTS,
							   U.USERNAME
						FROM secopre.REQUEST_HISTORY H,
							 secopre.WORKFLOW_CONFIG W,
							 secopre.STAGE_CONFIG SC1,
							 secopre.STAGE_CONFIG SC2,
							 secopre.STAGE S1,
							 secopre.STAGE S2,
							 secopre.STATUS S,
							 secopre.USER U
						where H.REQUEST_ID = :requestId
						AND H.WORKFLOW_CONFIG_ID = W.ID
						AND W.STAGE_CONFIG_ID = SC1.ID
						AND W.NEXT_STAGE_CONFIG = SC2.ID
						AND SC1.STAGE_ID = S1.ID
						AND SC2.STAGE_ID = S2.ID
						AND W.STATUS_ID = S.ID
						AND H.USER_ID = U.ID
						AND H.ACTIVE = 1
					]]>
				</prop>
	
	
				<prop key="GET_VALID_ENTRIES">
					<![CDATA[
						SELECT E.ID, E.NAME, E.CODE, E.PROGRAMMATIC_ID, E.ENTRY_CONCEPT_ID
						  FROM secopre.ENTRY E
						  LEFT JOIN secopre.ENTRY P ON (E.ENTRY_CONCEPT_ID = P.ID)
						  JOIN (SELECT DISTINCT DISTRICT_ID, ENTRY_ID 
						          FROM secopre.ENTRYDISTRICT ED 
						         WHERE ED.DISTRICT_ID = :districtId ) T
						    ON E.ID = T.ENTRY_ID
						   AND E.PROGRAMMATIC_ID = :programaticKeyId
						   AND E.ACCOUNTING_TYPE = 'PARTIDA'
						   AND E.STATUS = 'ACTIVE'
						ORDER BY P.CODE, E.CODE   
					]]>
				</prop>
				
				<prop key="GET_VALID_ENTRIES_BY_DISTRIC">
					<![CDATA[
						SELECT DISTINCT E.ID, E.NAME, E.CODE, E.PROGRAMMATIC_ID, E.ENTRY_CONCEPT_ID
						  FROM secopre.ENTRY E, 
						  	   secopre.ENTRY C,
						  	   secopre.ENTRYDISTRICT ED,
						  	   secopre.PROGRAMMATIC_KEY PK
						 WHERE E.ID = ED.ENTRY_ID
						   AND E.ENTRY_CONCEPT_ID = C.ID
						   AND E.ACCOUNTING_TYPE = 'PARTIDA'
						   AND E.PROGRAMMATIC_ID = PK.ID
						   AND PK.YEAR = YEAR(NOW())
						   AND PK.ACTIVE = 1
						   AND E.ACTIVE = 1
						   AND ED.DISTRICT_ID = :districtId
						   AND E.STATUS = 'ACTIVE'
						ORDER BY C.CODE, E.CODE
					]]>
				</prop>				
				<prop key="GET_STAGE_CONFIG_BY_ID">
					<![CDATA[
						SELECT SC.* FROM secopre.STAGE_CONFIG SC WHERE id = :stageConfigId
					]]>
				</prop>
				
				
				<prop key="GET_VALID_DISTRICTS">
					<![CDATA[
							SELECT D.ENTITY, D.ID, CONCAT('DTO-',D.NUMBER) AS DESCRIPTION,
							       EMAIL,TELEPHONE, D.ACTIVE, A.NUMBER NUMBER_EXT, A.STREET, A.COLONY, A.CITY, S.id STATE_ID, S.CODE, S.NAME, A.id ADDRESS_ID
							       FROM secopre.DISTRICT D JOIN
							(SELECT DISTINCT(ED.DISTRICT_ID) FROM secopre.ENTRYDISTRICT ED) T
								ON (D.ID = T.DISTRICT_ID)
							LEFT OUTER JOIN ADDRESS A
							  ON D.ADDRESS_ID = A.id
							    LEFT OUTER JOIN STATE S
							  ON S.id = D.STATE_ID
							  ORDER BY CONVERT(D.NUMBER,UNSIGNED INTEGER)
					]]>
				</prop>
				
				<prop key="GET_VALID_DISTRICTS_BY_USER">
					<![CDATA[
                        SELECT D.ENTITY,D.ID, 
						       CONCAT(S.NAME, ' (DTO-',D.NUMBER,')') AS DESCRIPTION,
						       EMAIL,TELEPHONE, D.ACTIVE, A.NUMBER NUMBER_EXT, A.STREET, A.COLONY, A.CITY, S.id STATE_ID, S.CODE, S.NAME, A.id ADDRESS_ID
						  FROM secopre.DISTRICT D 
						  LEFT OUTER JOIN ADDRESS A
							ON D.ADDRESS_ID = A.id
						       JOIN (SELECT DISTINCT(ED.DISTRICT_ID) FROM secopre.ENTRYDISTRICT ED) T ON (D.ID = T.DISTRICT_ID)
						       JOIN secopre.STATE S ON (D.STATE_ID = S.ID)
						       JOIN secopre.DISTRICT_USER DU ON (DU.DISTRICT_ID = D.ID AND DU.USER_ID =  :userId)
						       ORDER BY CONVERT(D.NUMBER,UNSIGNED INTEGER)
					]]>
				</prop>
				
				<prop key="IS_USERNAME_VALID">
					<![CDATA[
						SELECT COUNT(1) AS EXISTE
  						  FROM secopre.USER
                         WHERE USERNAME = :username
                           AND ACTIVE = 1
					]]>
				</prop>	
				
				<prop key="GET_REPORT_LIST">
					<![CDATA[
						SELECT DISTINCT R.ID,
							   R.DESCRIPTION, 
							   R.REPORT_TYPE,
							   R.PARAMETER_QUERY,
							   R.ROLE_OWNER,
							   R.LAST_UPDATE, 
							   R.ACTIVE,
							   R.REPORT_CODE,
							   RS.DESCRIPTION REPORT_SOURCE,
							   RS.DATASOURCE DATASOURCE
						  FROM secopre.REPORT R,
						  	   secopre.USER_ROLE UR,
						  	   secopre.REPORT_SOURCE RS,
						  	   secopre.ROLE_PERMISSION RP
						 WHERE R.ACTIVE = 1
						   AND R.PARENT_REPORT_ID IS NULL
						   AND R.ROLE_OWNER = RP.PERMISSION_ID
						   AND UR.ROLE_ID = RP.ROLE_ID
						   AND UR.USER_ID = :userId
						   AND R.REPORT_SOURCE_ID = RS.ID
					]]>
				</prop>	
					
				<prop key="GET_REPORT_BY_ID">
					<![CDATA[
						SELECT R.ID,
							   R.DESCRIPTION, 
							   R.REPORT_TYPE,
							   R.PARAMETER_QUERY,
							   R.ROLE_OWNER,
							   R.LAST_UPDATE, 
							   R.ACTIVE,
							   R.REPORT_CODE,
							   RS.DESCRIPTION REPORT_SOURCE,
							   RS.DATASOURCE DATASOURCE
						  FROM secopre.REPORT R,
						  	   secopre.REPORT_SOURCE RS
						 WHERE R.ID = :reportId
						 AND R.REPORT_SOURCE_ID = RS.ID
					]]>
				</prop>
				
				<prop key="GET_REPORT_RESOURCE">
					<![CDATA[
						SELECT R.RESOURCE
						  FROM secopre.REPORT R
						 WHERE R.ID = :reportId
					]]>
				</prop>			
	
				<prop key="VALIDATE_ENTRIES_NEXT_YEAR">
					<![CDATA[
						SELECT 
							COUNT(*) AS TOTAL
						FROM 
							secopre.ENTRY E 
							INNER JOIN secopre.PROGRAMMATIC_KEY PK ON E.PROGRAMMATIC_ID = PK.ID 
						WHERE 
							PK.YEAR = YEAR(
								CURDATE()
							) + 1
							AND E.STATUS = 'CONFIG'
					]]>
				</prop>

				<prop key="CLONE_ENTRIES">
					<![CDATA[	
						CLONE_ENTRIES
					]]>
				</prop>

				<prop key="GET_DISTRICT_ENTRIES_JPQL">
					<![CDATA[ 
						FROM
						    EntryDistrict ed 
						        join
						    ed.entry e
						    	join
						    e.programmaticKey pk 
						WHERE
						    pk.year = YEAR(CURDATE())
					]]>
				</prop>

				<prop key="GET_SUBREPORTS_BY_ID">
					<![CDATA[
						SELECT R.ID,
							   R.DESCRIPTION, 
							   R.REPORT_TYPE,
							   R.PARAMETER_QUERY,
							   R.ROLE_OWNER,
							   R.LAST_UPDATE, 
							   R.ACTIVE,
							   R.REPORT_CODE,
							   RS.DESCRIPTION REPORT_SOURCE,
							   RS.DATASOURCE DATASOURCE
						  FROM secopre.REPORT R,
						  	   secopre.REPORT_SOURCE RS
						 WHERE R.PARENT_REPORT_ID = :reportId
						 AND R.REPORT_SOURCE_ID = RS.ID
					]]>
				</prop>	
				
				<prop key="GET_ROLE_LIST_BY_USER">
					<![CDATA[
						SELECT ROLE_ID, ROLENAME
  						  FROM USER_ROLE ur, ROLE r
 						 WHERE ur.role_id=r.id
  						   AND USER_ID = :userId
					]]>
				</prop>	
				
				
				<prop key="GET_PERMISSION_LIST_BY_ROLE">
					<![CDATA[
						SELECT p.ID          PERMISSION_ID, 
						       p.NAME        NAME, 
						       rp.role_id    ROLEID ,
						       p.path_id     PATH_ID, 
						       pt.URL        PATH_URL,
						       m.id          MENU_ID,
						       m.NAME        MENU_NAME,
						       m.PARENT_ID   MENU_PARENT_ID,
						       m.MENU_ORDER  MENU_ORDER,
						       m.JSID        MENU_JSID,
						       m.JSFUNCTION  MENU_JSFUNCTION ,
						       m.DESCRIPTION MENU_DESCRIPTION,
						       m.CSSCLASS    MENU_CSSCLASS,
						       m.ACTIVE      MENU_ACTIVE
						  FROM ROLE_PERMISSION rp
						  JOIN PERMISSION p
						    ON rp.permission_id = p.id
						     AND rp.role_id = :idRole
						  LEFT OUTER JOIN PATH pt
						    ON pt.id = p.path_id
						  LEFT OUTER JOIN MENU m
						    ON m.id = pt.menu_id  
					]]>
				</prop>					
				
				<prop key="GET_ROLE_LIST_BY_MENU">
					<![CDATA[
						SELECT ROLE_ID, ROLENAME
  						  FROM MENU_ROLE mr, ROLE r
 						 WHERE mr.role_id=r.id
  						   AND MENU_ID = :idMenu
					]]>
				</prop>	
				
				<prop key="GET_REPORT_PARAMETERS">
					<![CDATA[
						SELECT RPC.REPORT_ID,
							   RPC.PARAMETER_NAME,
							   RPC.PARAMETER_PATH,
							   RPC.PARAMETER_ID,
							   RP.PARAMETER_TYPE,
							   RP.AJAX,
							   RPC.LABEL,
							   RPC.REQUIRED,
							   RPC.CREATION_DATE,
							   RPC.ACTIVE
						  FROM secopre.REPORT_PARAMETER_CONFIG RPC,
						  	   secopre.REPORT_PARAMETER RP
						 WHERE RPC.PARAMETER_ID = RP.ID
						 AND RPC.REPORT_ID = :reportId
					]]>
				</prop>
							   

				<prop key="GET_REPORT_IMAGES">
					<![CDATA[
						SELECT RIC.PARAMETER_NAME,
								   RI.DESCRIPTION,
								   RI.IMAGE,
								   RI.METHOD
							  FROM secopre.REPORT_IMAGE_CONFIG RIC,
							  	   secopre.REPORT_IMAGE RI
							 WHERE RIC.REPORT_IMAGE_ID = RI.ID
							   AND RIC.REPORT_ID = :reportId
					]]>
				</prop>
				
				<prop key="GET_CREATED_FORMALITIES_BY_USER">
					<![CDATA[
					SELECT R.FOLIO, 
						   'Creacion de Trámite' AS MOVEMENT_TYPE,
					       R.JUSTIFICATION AS JUSTIFICATION,
					       RH.COMMENTS AS COMMENTS,
					       F.DESCRIPTION AS FORMALITY,
					       RH.LAST_UPDATE CREATION_DATE,
					       (SELECT S.DESCRIPTION
					          FROM secopre.REQUEST_HISTORY IRH,
					          	   secopre.WORKFLOW_CONFIG WC,
					          	   secopre.STATUS S
					         WHERE IRH.ACTIVE = 1 
					           AND IRH.WORKFLOW_CONFIG_ID = WC.ID
					           AND WC.STATUS_ID = S.ID
					           AND IRH.REQUEST_ID = R.ID) AS CURRENT_STATUS
					  FROM secopre.REQUEST_HISTORY RH,
					  	   secopre.REQUEST R,
					  	   secopre.REQUEST_CONFIG RC,
					  	   secopre.FORMALITY F
					 WHERE RH.USER_ID = :userId
					   AND RH.CONSECUTIVE = 1
					   AND RC.REQUEST_ID = R.ID
					   AND RC.FORMALITY_ID = F.ID
					   AND RH.REQUEST_ID = R.ID
					 ORDER BY CREATION_DATE DESC
					 LIMIT :total
					]]>
				</prop>
				
				<prop key="GET_USER_MOVEMENT_ACTIONS">
					<![CDATA[
						SELECT R.FOLIO,
							   'Acción Sobre el Folio' as MOVEMENT_TYPE,
							   R.JUSTIFICATION,
							   RH.COMMENTS,
							   F.DESCRIPTION FORMALITY,
							   RH.LAST_UPDATE AS CREATION_DATE,
							   RH.REQUEST_ID, 
							   RH.CONSECUTIVE,
							   RH.LAST_UPDATE,
							   RH.WORKFLOW_CONFIG_ID, 
							   WC.WF_CFG_CODE, 
							   WC.NEXT_STAGE_CONFIG,
							   CONCAT(IFNULL ((SELECT IST.DESCRIPTION
							   	  FROM secopre.STATUS IST,
							   	  	   secopre.WORKFLOW_CONFIG IWC,
							   	  	   secopre.REQUEST_HISTORY IRH
							   	 WHERE IRH.REQUEST_ID = RH.REQUEST_ID
							   	   AND IRH.CONSECUTIVE = (RH.CONSECUTIVE - 1)
							   	   AND IRH.WORKFLOW_CONFIG_ID = IWC.ID
							   	   AND IWC.STATUS_ID = IST.ID), 'Creación del Folio'), ' > ', WC.WF_CFG_CODE, ' > ', S.DESCRIPTION) AS CURRENT_STATUS
						  FROM secopre.REQUEST_HISTORY RH,
						  	   secopre.WORKFLOW_CONFIG WC,
						  	   secopre.STAGE_CONFIG SC,
						  	   secopre.STATUS S,
						  	   secopre.REQUEST R,
						  	   secopre.FORMALITY F,
						  	   secopre.REQUEST_CONFIG RC
						 where RH.user_id = :userId 
						AND RH.WORKFLOW_CONFIG_ID = WC.ID
						AND WC.STAGE_CONFIG_ID = SC.ID
						AND WC.STATUS_ID = S.ID
						AND RH.REQUEST_ID = R.ID
						AND R.ID = RC.REQUEST_ID
						AND RC.FORMALITY_ID = F.ID
						ORDER BY CREATION_DATE DESC, RH.CONSECUTIVE DESC
						LIMIT :total
					]]>
				</prop>
				
				
				<prop key="GET_DISTRICT_LIST_BY_USER">
					<![CDATA[
			            SELECT D.ENTITY,D.id , D.NUMBER DESCRIPTION,EMAIL,TELEPHONE, D.ACTIVE, 
						       A.NUMBER NUMBER_EXT, A.STREET, A.COLONY, A.CITY, 
						       S.id STATE_ID, S.CODE, S.NAME, A.id ADDRESS_ID
						  FROM DISTRICT D
				       LEFT OUTER JOIN ADDRESS A
						    ON D.ADDRESS_ID = A.id
						  JOIN secopre.STATE S ON (D.STATE_ID = S.ID)
						  JOIN secopre.DISTRICT_USER DU ON (DU.DISTRICT_ID = D.ID AND DU.USER_ID =  :userId)
						  ORDER BY CONVERT(D.NUMBER,UNSIGNED INTEGER)
					]]>
				</prop>	
				
				<prop key="GET_USER_LIST_BY_DISTRICT">
					<![CDATA[
							SELECT U.id , U.USERNAME USERNAME, U.PERSON_ID,
							       ACTIVE, AVATAR, EMAIL, HAS_CHAT_ACTIVE, NICKNAME, PASSWORD, DASHBOARD_ID
						  	  FROM USER U,
						  	       DISTRICT_USER DU
						  	 WHERE U.ID = DU.USER_ID
						  	   AND DU.DISTRICT_ID = :districtId
					]]>
				</prop>

				<prop key="IS_PASSWORD_EXIST">
					<![CDATA[
							SELECT COUNT(1) AS EXISTE
							  FROM secopre.USER
							 WHERE ID = :idUser
							   AND PASSWORD = :password
					]]>
				</prop>	
				
				<prop key="GET_ENTRY_DISTRICT">
					<![CDATA[
						SELECT 
							   D.ID DISTRICT_ID,
							   D.NUMBER,
							   PK.ID PROGRAMATIC_KEY_ID,
							   PK.CODE,
							   PK.YEAR,
							   E.ID ENTRY_ID,
							   E.DESCRIPTION,
							   ED.MONTH,
							   ED.ANNUAL_AMOUNT,
							   ED.BUDGET_AMOUNT,
							   ED.BUDGET_AMOUNT_ASSIGN,
							   ED.COMMITTED_AMOUNT
						  FROM secopre.ENTRYDISTRICT ED,
						  	   secopre.DISTRICT D,
						  	   secopre.ENTRY E,
						  	   secopre.PROGRAMMATIC_KEY PK
						 WHERE ED.DISTRICT_ID = D.ID
						   AND ED.ENTRY_ID = E.ID
						   AND E.PROGRAMMATIC_ID = PK.ID
						   AND E.STATUS = 'ACTIVE'
						ORDER BY ED.DISTRICT_ID, ED.ENTRY_ID, ED.MONTH ASC, ANNUAL_AMOUNT DESC
						LIMIT 100
					]]>
				</prop>	
				
				<prop key="IS_VALID_DATE_FOR_CAPTURE">
					<![CDATA[
				 SELECT COUNT(*) IS_VALID FROM
						(SELECT DD.DUE_DATE AS FECHA_INICIAL, 
							   DD.MAX_BLOCK_DATE AS FECHA_FINAL
						  FROM secopre.DUE_DATE DD
						 WHERE DD.ACTIVE = 1) DATES
						 WHERE STR_TO_DATE(:currentDate, '%d/%m/%Y') BETWEEN DATES.FECHA_INICIAL AND DATES.FECHA_FINAL
					]]>
				</prop>
				
				<prop key="GET_PROPERTY_BY_CODE">
					<![CDATA[
					   SELECT P.* 
  						 FROM secopre.PROPERTY P
 						WHERE UPPER(P.CODE) = :code
					]]>
				</prop>
				
				<prop key="HAS_USER_ROLE">
					<![CDATA[
						SELECT COUNT(*) HAS_ROLE
						  FROM secopre.USER_ROLE
						 WHERE USER_ID = :userId
						   AND ROLE_ID = :roleId
					]]>
				</prop>
				
				<prop key="GET_ACTIVE_REQUESTS_IN_CAPTURE">
					<![CDATA[
						SELECT COUNT(*) AS ACTIVE_REQUESTS_IN_CAPTURE
						FROM 
						(SELECT R.ID
						  FROM secopre.REQUEST R,
						       secopre.REQUEST_HISTORY RH
						 WHERE R.ID = RH.REQUEST_ID
						   AND RH.CONSECUTIVE = 1
						   AND RH.USER_ID = :userId
						) USER_ACTIVE_REQUESTS,
						  secopre.REQUEST_HISTORY RH,
						  secopre.WORKFLOW_CONFIG WC,
						  secopre.STAGE_CONFIG SC
						WHERE USER_ACTIVE_REQUESTS.ID = RH.REQUEST_ID
						  AND RH.ACTIVE = 1
						  AND RH.WORKFLOW_CONFIG_ID = WC.ID
						  AND WC.NEXT_STAGE_CONFIG = SC.ID
						  AND SC.CAPTURE_FORM IS NOT NULL
					]]>
				</prop>
				
				<prop key="GET_MY_FORMALITY_INBOX">
					<![CDATA[
					SELECT DISTINCT R.ID, R.FOLIO FOLIO, 
								(CASE WHEN R.EXPENSE_DESCRIPTION IS NOT NULL THEN CONCAT(R.JUSTIFICATION, ' - ', R.EXPENSE_DESCRIPTION) ELSE R.JUSTIFICATION END) AS JUSTIFICATION,
								R.RESOURCE_PATH, DIST.ID DISTRICT,
								CONCAT(STATE.NAME," (DTO-",DIST.NUMBER,")") DISTRICT_DESCRIPTION, RC.FORMALITY_ID,
								F.DESCRIPTION FORMALITY_DESCRIPTION, 
								(SELECT DESCRIPTION FROM secopre.MOVEMENT_TYPE WHERE ID = IFNULL(R.MOVEMENT_TYPE_ID, 2)) TRANSACTION_TYPE,
								RH.WORKFLOW_CONFIG_ID,
								WC.STAGE_CONFIG_ID,
								(CASE WHEN R.MOVEMENT_TYPE_ID = 3 THEN
								(SELECT SUM(I.TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL I WHERE I.REQUEST_ID = R.ID AND I.MOVEMENT_TYPE_ID > 0)
								ELSE
								(SELECT SUM(TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL WHERE REQUEST_ID = R.ID) END) AS TOTAL_AMOUNT,
								--(SELECT SUM(TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL WHERE REQUEST_ID = R.ID) AS TOTAL_AMOUNT,
								(SELECT LAST_UPDATE FROM secopre.REQUEST_HISTORY WHERE CONSECUTIVE = 1 AND REQUEST_ID = R.ID) AS CREATION_DATE,
								ST.DESCRIPTION, WC.NEXT_STAGE_CONFIG, SC.PATH_ID, P.URL,
								SC.IS_CAPTURE, SC.IS_AUTHORIZATION,
								(CASE WHEN((SC.IS_CANCELED) OR (SC.IS_OPERATED))
									THEN 1 
									ELSE 0 
								END) AS IS_END_WORKFLOW,
								SC.IS_CANCELED,
								SC.IS_OPERATED,
								ifnull(SC.CAPTURE_FORM,"") CAPTURE_FORM,
								WC.STATUS_ID, S.DESCRIPTION NEXT_DESCRIPTION,
								(SELECT COUNT(*) FROM secopre.REQUEST_HISTORY IRH WHERE IRH.REQUEST_ID = R.ID AND IRH.COMMENTS IS NOT NULL) AS HAS_COMMENTS
						   FROM secopre.REQUEST R,
						   		secopre.REQUEST_HISTORY RH,
						   		secopre.REQUEST_CONFIG RC,
						   		secopre.FORMALITY F,
						   		secopre.WORKFLOW_CONFIG WC,
						   		secopre.STAGE_CONFIG SC0,
						   		secopre.STAGE_CONFIG SC,
						   		secopre.PATH P,
						   		secopre.STATUS S,
						   		secopre.USER_ROLE UR,
						   		secopre.STAGE ST,
						   		secopre.DISTRICT DIST,
						   		secopre.DISTRICT_USER DU,
						   		secopre.STATE STATE,
						   		(SELECT R.ID
								  FROM secopre.REQUEST R,
								       secopre.REQUEST_HISTORY RH,
								       secopre.WORKFLOW_CONFIG WC,
								       secopre.STAGE_CONFIG SC
								 WHERE R.ID = RH.REQUEST_ID
								   AND RH.USER_ID = :userId
								   AND RH.WORKFLOW_CONFIG_ID = WC.ID
								   AND WC.NEXT_STAGE_CONFIG = SC.ID
								   AND (RH.CONSECUTIVE = 1 OR (SC.IS_CANCELED = 1 OR SC.IS_OPERATED = 1))
								) MY_REQUEST
						  WHERE 
						        MY_REQUEST.ID = RH.REQUEST_ID
						    AND YEAR(R.LAST_UPDATE) = YEAR(NOW())				-- SOLO ANIO ACTUAL					        
						  	AND	R.ID = RH.REQUEST_ID 							-- TODOS LOS FOLIOS Y SU HISTORIA
						    AND R.ACTIVE = 1									-- ACTIVOS
						    AND RH.ACTIVE = 1		 							-- FILTRO POR TRANSICION ACTIVA
						    AND R.ID = RC.REQUEST_ID  							-- JOIN CON LA CONFIGURACION
						    AND RC.FORMALITY_ID = F.ID							-- JOIN DE LA CONFIGURACION CON EL TRAMITE
						    AND RH.WORKFLOW_CONFIG_ID = WC.ID					-- JOIN A LA TRANSICION
						    AND WC.ACTIVE = 1									-- FILTRO TRANSICION ACTIVA
						    AND WC.NEXT_STAGE_CONFIG = SC.ID					-- JOIN CON CONFIGURACION DE SIGUIENTE ETAPA
						    AND WC.STAGE_CONFIG_ID = SC0.ID						-- JOIN CON CONFIGURACION DE ETAPA ACTUAL
						    AND SC0.STAGE_ID = ST.ID							-- JOIN CON ETAPA ACTUAL
						    AND SC.PATH_ID = P.ID								-- JOIN CON PATH DE CONFIGURACION DE SIGUIENTE ETAPA
						    AND WC.STATUS_ID = S.ID								-- JOIN CON ESTATUS DE TRANSICION
						    AND R.DISTRICT_ID = DIST.ID							-- JOIN REQUEST CON DISTRITO
						    AND DIST.ID = DU.DISTRICT_ID						-- JOIN DISTRICT USER CON DISTRITO
						    AND DIST.STATE_ID = STATE.ID						-- JOIN DISTRICT CON STATE
						    ORDER BY CREATION_DATE DESC
					]]>
				</prop>
				
				<prop key="GET_MY_FORMALITY_INBOX_2">
					<![CDATA[
						SELECT DISTINCT MRH.REQUEST_ID ID,
									   MR.FOLIO,
									   (CASE WHEN MR.EXPENSE_DESCRIPTION IS NOT NULL THEN CONCAT(MR.JUSTIFICATION, ' - ', MR.EXPENSE_DESCRIPTION) ELSE MR.JUSTIFICATION END) AS JUSTIFICATION,
									   MR.RESOURCE_PATH,
									   MD.ID DISTRICT,
									   CONCAT(MSTATE.NAME," (DTO-",MD.NUMBER,")") DISTRICT_DESCRIPTION,
									   MRC.FORMALITY_ID,
									   MF.DESCRIPTION FORMALITY_DESCRIPTION,
									   MMT.DESCRIPTION TRANSACTION_TYPE,
									   MRH.WORKFLOW_CONFIG_ID,
									   MWC.STAGE_CONFIG_ID,
									   (CASE WHEN MR.MOVEMENT_TYPE_ID = 3 THEN
											(SELECT SUM(IRD.TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL IRD WHERE IRD.REQUEST_ID = MR.ID AND IRD.MOVEMENT_TYPE_ID > 0)
										ELSE
											(SELECT SUM(IRD.TOTAL_AMOUNT) FROM secopre.REQUEST_DETAIL IRD WHERE IRD.REQUEST_ID = MR.ID) 
										END) AS TOTAL_AMOUNT,
										CDRH.LAST_UPDATE CREATION_DATE,
										MS0.DESCRIPTION,
										MWC.NEXT_STAGE_CONFIG,
										MSC.PATH_ID,
										MP.URL,
										MSC.IS_CAPTURE, 
										MSC.IS_AUTHORIZATION,
										(CASE WHEN((MSC.IS_CANCELED) OR (MSC.IS_OPERATED)) THEN 1 ELSE 0 END) AS IS_END_WORKFLOW,
										MSC.IS_CANCELED,
										MSC.IS_OPERATED,
										IFNULL(MSC.CAPTURE_FORM,"") CAPTURE_FORM,
										MWC.STATUS_ID, 
										MSTATUS.DESCRIPTION NEXT_DESCRIPTION,
										MR.LAST_UPDATE FOLIO_CREATION_DATE,
										(SELECT COUNT(*) FROM secopre.REQUEST_HISTORY IRH WHERE IRH.REQUEST_ID = MR.ID AND IRH.COMMENTS IS NOT NULL) AS HAS_COMMENTS
								  FROM secopre.REQUEST_HISTORY MRH
								       JOIN secopre.WORKFLOW_CONFIG MWC ON (MRH.WORKFLOW_CONFIG_ID = MWC.ID)
								       JOIN secopre.STATUS MSTATUS ON (MWC.STATUS_ID = MSTATUS.ID)
								       JOIN secopre.STAGE_CONFIG MSC ON (MWC.NEXT_STAGE_CONFIG = MSC.ID)
								       JOIN secopre.STAGE MS ON (MSC.STAGE_ID = MS.ID)
								       JOIN secopre.PATH MP ON (MSC.PATH_ID = MP.ID)
								       JOIN secopre.STAGE_CONFIG MSC0 ON (MWC.STAGE_CONFIG_ID = MSC0.ID)
								       JOIN secopre.STAGE MS0 ON (MSC0.STAGE_ID = MS0.ID)
								       JOIN secopre.REQUEST MR ON (MRH.REQUEST_ID = MR.ID)
								       JOIN secopre.DISTRICT MD ON (MR.DISTRICT_ID = MD.ID)
								       JOIN secopre.STATE MSTATE ON (MD.STATE_ID = MSTATE.ID)
								       JOIN secopre.REQUEST_CONFIG MRC ON (MR.ID = MRC.REQUEST_ID)
								       JOIN secopre.FORMALITY MF ON (MRC.FORMALITY_ID = MF.ID)
								       LEFT JOIN secopre.MOVEMENT_TYPE MMT ON (IFNULL(MR.MOVEMENT_TYPE_ID, 2) = MMT.ID)
								       JOIN secopre.REQUEST_HISTORY CDRH ON (MRH.REQUEST_ID = CDRH.REQUEST_ID)
								       JOIN secopre.REQUEST_HISTORY MY ON (MY.REQUEST_ID = MRH.REQUEST_ID)
								 WHERE MY.USER_ID = :userId
								    AND YEAR(MR.LAST_UPDATE) = YEAR(NOW())				-- SOLO ANIO ACTUAL							 
								   AND (MY.CONSECUTIVE = 1 OR (MSC.IS_CANCELED = 1 OR MSC.IS_OPERATED = 1))
								   AND CDRH.CONSECUTIVE = 1
								   AND MRH.ACTIVE = 1
								ORDER BY MRH.REQUEST_ID DESC
					]]>
				</prop>
				
				<prop key="GET_AUTOMATIC_AUTHORIZATION">
					<![CDATA[
						SELECT IFNULL(T.AUTH_AUT_CODE, 'NA') AUTH_STAGE FROM
								(
								SELECT MAX(LEVEL), AUTH_AUT_CODE
								  FROM secopre.AUTHORIZATION_CONFIG AC,
								  	   secopre.USER U
								 WHERE AC.AUTHORIZATION_ID = :authorizationId
								   AND AC.POSITION_ID = U.POSITION_ID
								   AND U.ID = :userId
								) T
					]]>
				</prop>
				
				<prop key="INSERT_REQUEST_DETAIL">
					<![CDATA[
						INSERT INTO secopre.REQUEST_DETAIL
						(REQUEST_ID, MOVEMENT_TYPE_ID, PROGRAMATIC_KEY_ID, ENTRY_ID, INITIAL_MONTH, FINAL_MONTH, MONTH_AMOUNT, TOTAL_AMOUNT, ACTIVE)
						VALUES
						(:requestId, :movementTypeId, :programaticKeyId, :entryId, :initialMonth, :finalMonth, :monthAmount, :totalAmount, :active)
					]]>
				</prop>
				
				<prop key="GET_NOTIFICATIONS_BY_USER">
					<![CDATA[
						SELECT * FROM secopre.NOTIFICATION
						where USER_ID = :userId 
						AND STATUS = 1
						AND TYPE = 1
					    AND YEAR(CREATION_DATE) = YEAR(NOW())				-- SOLO ANIO ACTUAL					
					]]>
				</prop>
				
				<prop key="GET_LIST_DISTRICTS">
					<![CDATA[
						SELECT D.ID, CONCAT('DTO-',D.NUMBER) AS DESCRIPTION ,EMAIL,TELEPHONE, D.ACTIVE, 
						       A.NUMBER NUMBER_EXT, A.STREET, A.COLONY, A.CITY, 
						       S.id STATE_ID, S.CODE, S.NAME, A.id ADDRESS_ID, D.ENTITY
						  FROM DISTRICT D
						  LEFT OUTER JOIN ADDRESS A
						  ON D.ADDRESS_ID = A.id
						    LEFT OUTER JOIN STATE S
						  ON S.id = D.STATE_ID
						  ORDER BY CONVERT(D.NUMBER,UNSIGNED INTEGER)
					]]>
				</prop>
				
				<prop key="GET_LIST_USERS">
					<![CDATA[
                         SELECT ID,ACTIVE,AVATAR, EMAIL, HAS_CHAT_ACTIVE, NICKNAME, PASSWORD,USERNAME, DASHBOARD_ID, PERSON_ID
                           FROM USER
					]]>
				</prop>
				
				<prop key="INSERT_REQUEST_DETAIL_MIRROR">
					<![CDATA[
						INSERT INTO secopre.REQUEST_DETAIL_MIRROR
						(REQUEST_ID, MOVEMENT_TYPE_ID, PROGRAMATIC_KEY_ID, ENTRY_ID, INITIAL_MONTH, FINAL_MONTH, MONTH_AMOUNT, TOTAL_AMOUNT, ACTIVE)
						VALUES
						(:requestId, :movementTypeId, :programaticKeyId, :entryId, :initialMonth, :finalMonth, :monthAmount, :totalAmount, :active)
					]]>
				</prop>
				
				<prop key="CLEAN_REQUEST_DETAIL_MIRROR">
					<![CDATA[
						DELETE FROM secopre.REQUEST_DETAIL_MIRROR WHERE REQUEST_ID = :requestId
					]]>
				</prop>
				
				<prop key="GET_REQUEST_DETAIL_MIRROR">
					<![CDATA[
						SELECT * FROM secopre.REQUEST_DETAIL_MIRROR
						where REQUEST_ID = :requestId
					]]>
				</prop>
				
				<prop key="REMOVE_REQUEST_DETAIL_ELEMENT">
					<![CDATA[
						DELETE FROM secopre.REQUEST_DETAIL_MIRROR WHERE ID = :requestDetailId
					]]>
				</prop>

				<prop key="GET_MIRROR_MOVEMENT_TOTAL">
					<![CDATA[
						SELECT IFNULL(TOTAL, 0) TOTAL FROM (
						SELECT SUM(TOTAL_AMOUNT) TOTAL
						  FROM secopre.REQUEST_DETAIL_MIRROR
						 WHERE REQUEST_ID = :requestId
						   AND MOVEMENT_TYPE_ID = :movementTypeId
					) T
	   				]]>
					</prop>			

				<prop key="GET_LIST_ENTRIES">
					<![CDATA[
                            SELECT E.ID, E.ACTIVE, E.CODE, E.NAME,E.DESCRIPTION , 
						         CONCAT(PK.YEAR," ",PK.RAMO, " ",PK.UNIT_RESPONSABLE," " ,PK.FUNCTIONAL_GROUP," ",PK.FUNCTION," ",PK.SUBFUNCTION," ",PK.PROGRAM," ",PK.ACTIVITY," ",PK.CODE," ",PK.FINANCING_SOURCE) DESCRIPTION_PK, 
						         PK.ID PROGRAMMATIC_ID, PK.CODE, PK.YEAR, PK.ACTIVITY, PK.FINALITY, PK.FUNCTION,PK.PROGRAM_BUDGET, PK.SUBFUNCTION, UNIT_RESPONSABLE
						    FROM ENTRY E,
						         PROGRAMMATIC_KEY PK
						   WHERE E.PROGRAMMATIC_ID = PK.id
						    AND  E.STATUS = 'ACTIVE'
						   ORDER BY E.CODE
					]]>
				</prop>		
				
				<prop key="GET_DISTRICT_LIST_BY_NOTICE">
					<![CDATA[
				           SELECT D.ENTITY,D.ID, 
						       CONCAT(S.NAME, ' (DTO-',D.NUMBER,')') AS DESCRIPTION,
						       EMAIL,TELEPHONE, D.ACTIVE, A.NUMBER NUMBER_EXT, A.STREET, A.COLONY, A.CITY, S.id STATE_ID, S.CODE, S.NAME, A.id ADDRESS_ID
						  FROM secopre.DISTRICT D 
						  LEFT OUTER JOIN ADDRESS A
							ON D.ADDRESS_ID = A.id
						       JOIN secopre.STATE S ON (D.STATE_ID = S.ID)
						       JOIN secopre.NOTICE_DISTRICT NU ON (NU.DISTRICT_ID = D.ID AND NU.NOTICE_ID =  :noticeId)	
						     ORDER BY CONVERT(D.NUMBER,UNSIGNED INTEGER)
					]]>
				</prop>
				
				<prop key="GET_ACTIVE_PK">
					<![CDATA[
				   		SELECT ID FROM secopre.PROGRAMMATIC_KEY WHERE ACTIVE = 1
					]]>
				</prop>
				
				<prop key="GET_ENTRY_CURRENT_TOTALS">
					<![CDATA[
				        SELECT DISTRICT_ID,
							   D.NUMBER,
							   S.NAME,
							   ENTRY_ID,
							   E.DESCRIPTION,
							   ANNUAL_AMOUNT,
							   SUM(ENERO) AS ENERO,
							   SUM(FEBRERO) AS FEBRERO,
							   SUM(MARZO) AS MARZO,
							   SUM(ABRIL) AS ABRIL,
							   SUM(MAYO) AS MAYO,
							   SUM(JUNIO) AS JUNIO,
							   SUM(JULIO) AS JULIO,
							   SUM(AGOSTO) AS AGOSTO,
							   SUM(SEPTIEMBRE) AS SEPTIEMBRE,
							   SUM(OCTUBRE) AS OCTUBRE,
							   SUM(NOVIEMBRE) AS NOVIEMBRE,
							   SUM(DICIEMBRE) AS DICIEMBRE
						  FROM (
						SELECT ED.DISTRICT_ID,
							   ED.ENTRY_ID,
							   ED.ANNUAL_AMOUNT,
							   ED.MONTH,
							   CASE WHEN MONTH = 0 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS ENERO,
							   CASE WHEN MONTH = 1 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS FEBRERO,
							   CASE WHEN MONTH = 2 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS MARZO,
							   CASE WHEN MONTH = 3 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS ABRIL,
							   CASE WHEN MONTH = 4 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS MAYO,
							   CASE WHEN MONTH = 5 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS JUNIO,
							   CASE WHEN MONTH = 6 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS JULIO,
							   CASE WHEN MONTH = 7 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS AGOSTO,
							   CASE WHEN MONTH = 8 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS SEPTIEMBRE,
							   CASE WHEN MONTH = 9 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS OCTUBRE,
							   CASE WHEN MONTH = 10 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS NOVIEMBRE,
							   CASE WHEN MONTH = 11 THEN (ED.BUDGET_AMOUNT_ASSIGN - ED.COMMITTED_AMOUNT) ELSE 0 END AS DICIEMBRE
						  FROM secopre.ENTRYDISTRICT ED
						) T,
						  secopre.ENTRY E,
						  secopre.DISTRICT D,
						  secopre.STATE S
						WHERE T.DISTRICT_ID = D.ID
						AND T.ENTRY_ID = E.ID
						AND D.ID = :districtId
						AND E.ID = :entryId
						AND E.STATUS = 'ACTIVE'
						AND D.STATE_ID = S.ID
						GROUP BY DISTRICT_ID, ENTRY_ID
						ORDER BY DISTRICT_ID, ENTRY_ID
					]]>
				</prop>	
				
				<prop key="GET_LIST_DIRECTORS">
					<![CDATA[
						   SELECT U.ID,U.ACTIVE,AVATAR, EMAIL, HAS_CHAT_ACTIVE, 
							          NICKNAME, PASSWORD,USERNAME, DASHBOARD_ID, PERSON_ID, 
							          P.DESCRIPTION,P.id POSITION_ID, P.NAME PUESTO_DESCRIPCION,
							          PERSON.FATHER_LASTNAME, PERSON.MOTHER_LASTNAME, PERSON.NAME
							     FROM USER U, 
					                          POSITION P,
					                          PERSON PERSON
							    WHERE U.POSITION_ID = P.ID
					                      AND PERSON.ID = PERSON_ID
							      AND ES_DIRECTOR IN (1,2,3,4,5)
							      AND U.ID NOT IN
										      (
										       SELECT USER_ID 
										   FROM DIRECTOR
										  WHERE ACTIVE = 1
										  )
							 ORDER BY P.DESCRIPTION
					]]>
				</prop>
				
				<prop key="GET_ALL_LIST_DIRECTORS">
					<![CDATA[
						   SELECT U.ID,U.ACTIVE,AVATAR, EMAIL, HAS_CHAT_ACTIVE, 
							          NICKNAME, PASSWORD,USERNAME, DASHBOARD_ID, PERSON_ID, 
							          P.DESCRIPTION,P.id POSITION_ID, P.NAME PUESTO_DESCRIPCION,
							          PERSON.FATHER_LASTNAME, PERSON.MOTHER_LASTNAME, PERSON.NAME
							     FROM USER U, 
					                          POSITION P,
					                          PERSON PERSON
							    WHERE U.POSITION_ID = P.ID
					                      AND PERSON.ID = PERSON_ID
							      AND ES_DIRECTOR IN (1,2,3,4,5)
							 ORDER BY P.DESCRIPTION
					]]>
				</prop>
				
				<prop key="HAS_DISTRICT_ROLE">
					<![CDATA[
					SELECT COUNT(*)
	  				  FROM DISTRICT_USER DU,
	       			       USER_ROLE UR,
	       			              ( SELECT   D.ENTITY, D.ID, CONCAT('DTO-',D.NUMBER) AS DESCRIPTION,
							       EMAIL,TELEPHONE, D.ACTIVE, A.NUMBER NUMBER_EXT, A.STREET, A.COLONY, A.CITY, S.id STATE_ID, S.CODE, S.NAME, A.id ADDRESS_ID
							       FROM secopre.DISTRICT D JOIN
							(SELECT DISTINCT(ED.DISTRICT_ID) FROM secopre.ENTRYDISTRICT ED) T
								ON (D.ID = T.DISTRICT_ID)
							LEFT OUTER JOIN ADDRESS A
							  ON D.ADDRESS_ID = A.id
							    LEFT OUTER JOIN STATE S
							  ON S.id = D.STATE_ID
							  ORDER BY CONVERT(D.NUMBER,UNSIGNED INTEGER)   )    D
	 				 WHERE DU.USER_ID = UR.USER_ID
	   				   AND ROLE_ID     =  :roleId
	   				   AND D.ID = DU.DISTRICT_ID
	   				   AND DISTRICT_ID = :districtId
					]]>
				</prop>

				<prop key="GET_MASIVE_REQUEST_TO_CANCEL">
					<![CDATA[
				SELECT DISTINCT R.ID AS REQUEST_ID,
							   R.FOLIO,
							   R.DISTRICT_ID,
							   R.JUSTIFICATION,
							   R.RESOURCE_PATH,
							   R.MOVEMENT_TYPE_ID,
							   R.CERTIFIED_ACCOUNT,
							   R.ENTRY_ID,
							   R.LAST_UPDATE
				  FROM secopre.REQUEST R,
				  	   secopre.REQUEST_DETAIL RD,
				  	   secopre.REQUEST_HISTORY RH,
				  	   secopre.WORKFLOW_CONFIG WC,
				  	   secopre.STAGE_CONFIG SC
				 WHERE R.ID = RD.REQUEST_ID
				   AND R.DISTRICT_ID = :districtId
				   AND (:month BETWEEN RD.INITIAL_MONTH AND RD.FINAL_MONTH)
				   AND R.ID <> :requestId
				   AND R.ID = RH.REQUEST_ID
				   AND RH.ACTIVE = 1
				   AND WC.ID = RH.WORKFLOW_CONFIG_ID
				   AND WC.NEXT_STAGE_CONFIG = SC.ID
				   AND SC.IS_AUTHORIZATION = 1
   					]]>
				</prop>			
				
				<prop key="GET_DISTRICT_LIST_BY_DUEDATE">
					<![CDATA[
				           SELECT D.ENTITY,D.ID, 
						       CONCAT(S.NAME, ' (DTO-',D.NUMBER,')') AS DESCRIPTION,
						       EMAIL,TELEPHONE, D.ACTIVE, A.NUMBER NUMBER_EXT, A.STREET, A.COLONY, A.CITY, S.id STATE_ID, S.CODE, S.NAME, A.id ADDRESS_ID
						  FROM secopre.DISTRICT D 
						  LEFT OUTER JOIN ADDRESS A
							ON D.ADDRESS_ID = A.id
						       JOIN secopre.STATE S ON (D.STATE_ID = S.ID)
						       JOIN secopre.DUEDATE_DISTRICT NU ON (NU.DISTRICT_ID = D.ID AND NU.DUEDATE_ID =  :dueDateId)	
						     ORDER BY CONVERT(D.NUMBER,UNSIGNED INTEGER)
					]]>
				</prop>
				
				<prop key="GET_SORTED_ENTRIES">
					<![CDATA[
							SELECT E.* 
							  FROM secopre.ENTRY E,
							  	   secopre.ENTRY C,
							  	   secopre.PROGRAMMATIC_KEY PK
							 WHERE E.PROGRAMMATIC_ID = PK.ID
							   AND PK.YEAR = YEAR(NOW())
							   AND E.ACCOUNTING_TYPE = 'PARTIDA'
							   AND E.ENTRY_CONCEPT_ID = C.ID
							   AND PK.ACTIVE = 1
							   AND E.ACTIVE = 1
							   AND E.STATUS = 'ACTIVE'
							ORDER BY C.CODE, E.CODE
				]]>
				</prop>
				
				<prop key="GET_SORTED_ENTRIES_BY_PK">
					<![CDATA[
							SELECT E.* 
							  FROM secopre.ENTRY E,
							  	   secopre.ENTRY C,
							  	   secopre.PROGRAMMATIC_KEY PK
							 WHERE E.PROGRAMMATIC_ID = PK.ID
							   AND PK.YEAR = YEAR(NOW())
							   AND E.ACCOUNTING_TYPE = 'PARTIDA'
							   AND E.ENTRY_CONCEPT_ID = C.ID
							   AND PK.ACTIVE = 1
							   AND E.ACTIVE = 1
							   AND PK.ID = :programaticId
							   AND E.STATUS = 'ACTIVE'
							ORDER BY C.CODE, E.CODE
				]]>
				</prop>
				
				<prop key="GET_SORTED_CONCEPTS">
					<![CDATA[
							SELECT E.* 
							  FROM secopre.ENTRY E,
							  	   secopre.PROGRAMMATIC_KEY PK
							 WHERE E.PROGRAMMATIC_ID = PK.ID
							   AND PK.YEAR = YEAR(NOW())
							   AND E.ACCOUNTING_TYPE = 'CONCEPTO'
							   AND PK.ACTIVE = 1
							   AND E.ACTIVE = 1
							   AND E.STATUS = 'ACTIVE'
							ORDER BY E.CODE
					]]>
				</prop>	
				
				<prop key="GET_EMPLOYMENT_WITH_FULL_DISTRICT_SELECTION">
					<![CDATA[
						SELECT REFD.* FROM secopre.REPORT_EMPLOYMENT_FOR_DISTRICT REFD
					]]>
				</prop>	
				
				<prop key="GET_USER_BY_USERNAME">
					<![CDATA[
							SELECT U.id , U.USERNAME USERNAME, U.PERSON_ID,
							       ACTIVE, AVATAR, EMAIL, HAS_CHAT_ACTIVE, NICKNAME, PASSWORD, DASHBOARD_ID
						  	  FROM USER U
						  	 WHERE U.username = :username
					]]>
				</prop>
				
			    <prop key="CLEAN_ROLE_PERMISSION">
					<![CDATA[
						DELETE FROM secopre.ROLE_PERMISSION WHERE ROLE_ID = :roleId
					]]>
				</prop>	
				
				<prop key="GET_REQUEST_BY_ENTRY">
					<![CDATA[
						SELECT IFNULL(MAX(T.ID),0) AS ID FROM (
							SELECT R.ID
							  FROM secopre.REQUEST R
							 WHERE R.ENTRY_ID = :entryId
							) T
					]]>
				</prop>
														
				<prop key="EXIST_CERTIFIED_ACCOUNT_IN_DISTRICT">
					<![CDATA[
						select COUNT(*) AS EXISTE 
						  FROM secopre.REQUEST R 
						 WHERE R.DISTRICT_ID = :districtId 
						   AND R.CERTIFIED_ACCOUNT = :account
						   AND R.ID <> :me
					]]>
				</prop>
				
				<prop key="CAN_USER_CANCEL_REQUEST">
					<![CDATA[
				  select COUNT(*) as TOTAL
					from secopre.FORMALITY_CANCEL_ROLE FCR,
						 secopre.USER_ROLE UR
					where UR.ROLE_ID = FCR.ROLE_ID
					and UR.USER_ID = :userId
					and FCR.FORMALITY_ID = :formalityId
					]]>
				</prop>
				
				<prop key="UPDATE_NOTIFICATION">
					<![CDATA[
				  		UPDATE secopre.NOTIFICATION
				  		   SET STATUS = 0
				  		 WHERE ID = :notificationId
					]]>
				</prop>
						
			</props>	
			
						
		</property>
	</bean>

</beans>